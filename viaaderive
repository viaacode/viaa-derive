#!/usr/bin/env bash
# creates derivative video files
# requires ffmpeg compiled with libx264 (yuv 8-bit), libvpx, libopus, and ffprobe

# defaults, can be overwritten with options
FFMPEG_PATH="ffmpeg"
FFPROBE_PATH="ffprobe"

# default ffmpeg input options
INPUTOPTIONS+=(-nostdin)
INPUTOPTIONS+=(-vsync 0)
INPUTOPTIONS+=(-hide_banner)
LOGDIR="LOGS"

# usage
_usage(){
    echo "VIAA derivative script"
    echo
    echo "$(basename "${0}") inputvideo1 [inputvideo2 ... ]"
    echo
    echo "-h, --help            print this help message"
    echo "-o, --outputs         options lists separated by '+'"
    echo "                      options include:"
    echo "                      mpeg4"
    echo "                      webm"
    echo "                      framemd5"
    echo "                      prores"
    echo "                      ffv1"
    echo "    --ffmpegpath      path to ffmpeg"
    echo "    --ffprobepath     path to ffprobe"
    echo "    --inputoptions    extra input options for ffmpeg"
    echo "    --outputoptions   extra outputs options for ffmpeg (applies to all outputs)"
    echo
    echo "    --ffv1            enable ffv1 output (same as '-o ffv1')"
    echo "    --ffv1path        specify an output file for ffv1"
    echo "    --mpeg4           enable ffv1 output (same as '-o mpeg4')"
    echo "    --mpeg4path       specify an output file for mpeg4"
    echo "    --prores          enable ffv1 output (same as '-o prores')"
    echo "    --prorespath      specify an output file for prores"
    echo "    --webm            enable ffv1 output (same as '-o webm')"
    echo "    --webmpath        specify an output file for webm"
    echo "    --framemd5        enable ffv1 output (same as '-o framemd5')"
    echo "    --framemd5path    specify an output file for framemd5"
    echo
    echo "-y, --overwrite       Overwrite output files by default,"
    echo "                      same as --outputoptions '-y'"
    echo "-r, --report          Output a report per transcoding."
    echo
    echo "Note that setting a --*path implies that the corresponding output is enabled."
    echo "Also note that if the output file already exists, then that output will be disabled."
    echo
    echo "Example:"
    echo "$(basename "${0}") -o mpeg4+prores+webm+ffv1 FILE1 FILE2"
    echo "would make those four outputs for each of the two inputs."
    echo
    exit
}
[ "${#}" = 0 ] && _usage

while true ; do
    case "$1" in
        -o | --outputs ) shift ; OUTPUT_OPTIONS="${1}" ; shift ;;
        -h | --help ) shift ; _usage ;;
        --ffmpegpath ) shift ; FFMPEG_PATH="${1}" ; shift ;;
        --ffprobepath ) shift ; FFPROBE_PATH="${1}" ; shift ;;
        --inputoptions ) shift ; INPUTOPTIONS+=(${1}) ; shift ;;
        --outputoptions ) shift ; OUTPUTOPTIONS+=(${1}) ; shift ;;
        -y | --overwrite ) shift ; OUTPUTOPTIONS+=(-y) ;;
        -r | --report ) shift ; export FFREPORT="file=${LOGDIR}/$(basename "${0}")_%p_%t.txt" ; _mkdir2 "${LOGDIR}" ;;
        --ffv1 ) shift ; SCREENING_FFV1_ENABLE=true ;;
        --ffv1path ) shift ; SCREENING_FFV1_ENABLE=true ; SCREENING_FFV1_OUTPUT="${1}" ; shift ;;
        --mpeg4 ) shift ; STREAMING_MPEG4_ENABLE=true ;;
        --mpeg4path ) shift ; STREAMING_MPEG4_ENABLE=true ; STREAMING_MPEG4_OUTPUT="${1}" ; shift ;;
        --prores ) shift ; SCREENING_PRORES_ENABLE=true ;;
        --prorespath ) shift ; SCREENING_PRORES_ENABLE=true ; SCREENING_PRORES_OUTPUT="${1}" ; shift ;;
        --webm ) shift ; STREAMING_WEBM_ENABLE=true ;;
        --webmpath ) shift ; STREAMING_WEBM_ENABLE=true ; STREAMING_WEBM_OUTPUT="${1}" ; shift ;;
        --framemd5 ) shift ; FRAMEMD5_ENABLE=true ;;
        --framemd5path ) shift ; FRAMEMD5_ENABLE=true ; FRAMEMD5_OUTPUT="${1}" ; shift ;;
        -* | --* ) echo "Not sure what $1 means." ; echo ; _usage ;;
        * ) break ;;
    esac
done

if [[ "+$OUTPUT_OPTIONS+" = *"+mpeg4+"* ]] ; then
    STREAMING_MPEG4_ENABLE=true
elif [[ -z "${STREAMING_MPEG4_ENABLE+x}" ]] ; then
    STREAMING_MPEG4_ENABLE=false
fi
if [[ "+$OUTPUT_OPTIONS+" = *"+webm+"* ]] ; then
    STREAMING_WEBM_ENABLE=true
elif [[ -z "${STREAMING_WEBM_ENABLE+x}" ]] ; then
    STREAMING_WEBM_ENABLE=false
fi
if [[ "+$OUTPUT_OPTIONS+" = *"+framemd5+"* ]] ; then
    FRAMEMD5_ENABLE=true
elif [[ -z "${FRAMEMD5_ENABLE+x}" ]] ; then
    FRAMEMD5_ENABLE=false
fi
if [[ "+$OUTPUT_OPTIONS+" = *"+prores+"* ]] ; then
    SCREENING_PRORES_ENABLE=true
elif [[ -z "${SCREENING_PRORES_ENABLE+x}" ]] ; then
    SCREENING_PRORES_ENABLE=false
fi
if [[ "+$OUTPUT_OPTIONS+" = *"+ffv1+"* ]] ; then
    SCREENING_FFV1_ENABLE=true
elif [[ -z "${SCREENING_FFV1_ENABLE+x}" ]] ; then
    SCREENING_FFV1_ENABLE=false
fi

_get_iso8601_c(){
    date +%Y%m%d-%H%M%S
}

# _report function handles display of messages to operator
_report(){
    local RED="$(tput setaf 1)"   # Red      - For Warnings
    local GREEN="$(tput setaf 2)" # Green    - For Declarations
    local BLUE="$(tput setaf 4)"  # Blue     - For Questions
    local NC="$(tput sgr0)"       # No Color
    local COLOR=""
    local STARTMESSAGE=""
    local ENDMESSAGE=""
    local ECHOOPT=""
    local LOG_MESSAGE=""
    OPTIND=1
    while getopts ":qdwstn" OPT; do
        case "${OPT}" in
            q) COLOR="${BLUE}" ;;                         # question mode, use color blue
            d) COLOR="${GREEN}" ;;                        # declaration mode, use color green
            w) COLOR="${RED}" ; LOG_MESSAGE="Y" ;;        # warning mode, use color red
            s) STARTMESSAGE+=([$(basename "${0}")] ) ;;   # prepend scriptname to the message
            t) STARTMESSAGE+=($(_get_iso8601) '- ' ) ;;   # prepend timestamp to the message
            n) ECHOOPT="-n" ;;                            # to avoid line breaks after echo
        esac
    done
    shift $(( ${OPTIND} - 1 ))
    MESSAGE="${1}"
    echo "${ECHOOPT}" "${COLOR}${STARTMESSAGE[@]}${MESSAGE}${NC}"
}

_mkdir2(){
    local DIR2MAKE=""
    while [ "${*}" != "" ] ; do
        DIR2MAKE="${1}"
        if [ ! -d "${DIR2MAKE}" ] ; then
            mkdir -p "${DIR2MAKE}"
            if [ "${?}" -ne 0 ]; then
                _report -wt "${0}: Can't create directory at ${DIR2MAKE}"
                exit 1
            fi
        fi
        shift
    done
}

_unset_variables(){
    unset VIDEOFILTERCHAIN
    unset AUDIOFILTERCHAIN
    unset CODEC_NAME
    unset HEIGHT
    unset AUDIO_INDEX_1
    unset AUDIO_INDEX_2
    unset AUDIO_CHANNELS
    unset CHANNEL_LAYOUT
    unset FFREPORT
    unset OUTPUTS
}

# filters for constructing filterchains
_add_video_filter(){
    OPTIND=1
    unset ADDASPREFIX
    while getopts ":p" OPT ; do
        case "${OPT}" in
            p) ADDASPREFIX=true ;;
        esac
    done
    shift $(( ${OPTIND} - 1 ))
    local FILTER2ADD="${1}"
    if [[ -n "${FILTER2ADD}" ]] ; then
        if [[ -n "${next_video_filter_prefix}" ]] ; then
            FILTER2ADD="${next_video_filter_prefix}${FILTER2ADD}"
            unset next_video_filter_prefix
        fi
        if [[ -z "${VIDEOFILTERCHAIN}" ]] ; then
            VIDEOFILTERCHAIN="${FILTER2ADD}"
        elif [[ "${ADDASPREFIX}" = true ]] ; then
            if [[ "${FILTER2ADD: -1}" = ";" || "${FILTER2ADD: -1}" = "," ]] ; then
                VIDEOFILTERCHAIN="${FILTER2ADD}${VIDEOFILTERCHAIN}"
            else
                VIDEOFILTERCHAIN="${FILTER2ADD},${VIDEOFILTERCHAIN}"
            fi
        else
            if [[ "${VIDEOFILTERCHAIN: -1}" = ";" || "${VIDEOFILTERCHAIN: -1}" = "," ]] ; then
                VIDEOFILTERCHAIN="${VIDEOFILTERCHAIN}${FILTER2ADD}"
            else
                VIDEOFILTERCHAIN="${VIDEOFILTERCHAIN},${FILTER2ADD}"
            fi
        fi
    fi
}
_add_audio_filter(){
    OPTIND=1
    unset ADDASPREFIX
    while getopts ":p" OPT ; do
        case "${OPT}" in
            p) ADDASPREFIX=true ;;
        esac
    done
    shift $(( ${OPTIND} - 1 ))
    local FILTER2ADD="${1}"
    if [[ -n "${FILTER2ADD}" ]] ; then
        if [[ -n "${next_audio_filter_prefix}" ]] ; then
            FILTER2ADD="${next_audio_filter_prefix}${FILTER2ADD}"
            unset next_audio_filter_prefix
        fi
        if [[ -z "${AUDIOFILTERCHAIN}" ]] ; then
            AUDIOFILTERCHAIN="${FILTER2ADD}"
        elif [[ "${ADDASPREFIX}" = true ]] ; then
            if [[ "${FILTER2ADD: -1}" = ";" || "${FILTER2ADD: -1}" = "," ]] ; then
                AUDIOFILTERCHAIN="${FILTER2ADD}${AUDIOFILTERCHAIN}"
            else
                AUDIOFILTERCHAIN="${FILTER2ADD},${AUDIOFILTERCHAIN}"
            fi
        else
            if [[ "${AUDIOFILTERCHAIN: -1}" = ";" || "${AUDIOFILTERCHAIN: -1}" = "," ]] ; then
                AUDIOFILTERCHAIN="${AUDIOFILTERCHAIN}${FILTER2ADD}"
            else
                AUDIOFILTERCHAIN="${AUDIOFILTERCHAIN},${FILTER2ADD}"
            fi
        fi
    fi
}
_filter_to_middle_option(){
    if [ -n "${VIDEOFILTERCHAIN}" -a -n "${AUDIOFILTERCHAIN}" ] ; then
        FILTERCHAIN+=(-filter_complex ${VIDEOFILTERCHAIN}\;${AUDIOFILTERCHAIN})
    elif [ -n "${VIDEOFILTERCHAIN}" ] ; then
        FILTERCHAIN+=(-filter_complex ${VIDEOFILTERCHAIN})
    elif [ -n "${AUDIOFILTERCHAIN}" ] ; then
        FILTERCHAIN+=(-filter_complex ${AUDIOFILTERCHAIN})
    fi
}
# _get_input info
_get_input_info(){
    CODEC_NAME=$("${FFPROBE_PATH}" "${1}" -select_streams v:0 -show_entries stream=codec_name 2>/dev/null -of default=nk=1:nw=1)
    HEIGHT=$("${FFPROBE_PATH}" "${1}" -select_streams v:0 -show_entries stream=height 2>/dev/null -of default=nk=1:nw=1)
    VIDEOSTREAMCOUNT=$("${FFPROBE_PATH}" "${1}" -select_streams v -show_entries stream=index -of flat 2>/dev/null | awk 'END { print NR }')
    AUDIOSTREAMCOUNT=$("${FFPROBE_PATH}" "${1}" -select_streams a -show_entries stream=index -of flat 2>/dev/null | awk 'END { print NR }')
}

_get_audiostreamcount(){
    AUDIOSTREAMCOUNT=$(ffprobe "${1}" -select_streams a -show_entries stream=index -of flat 2>/dev/null | awk 'END { print NR }')
}

# _get_audio_mapping handles re-mixing audio to a single track for access
_get_audio_mapping(){
    _get_audio_index(){
        # get ffmpeg's index value of the first audio stream. Useful for do custom channel mappings.
        AUDIO_INDEX_1=$("${FFPROBE_PATH}" "${1}" -show_streams -select_streams a:0 2>/dev/null | grep "^index=" | cut -d = -f 2)
        AUDIO_INDEX_2=$("${FFPROBE_PATH}" "${1}" -show_streams -select_streams a:1 2>/dev/null | grep "^index=" | cut -d = -f 2)
    }
    _get_audio_channels(){
        # get ffmpeg's channel count of the first audio stream.
        AUDIO_CHANNELS=$("${FFPROBE_PATH}" "${1}" -show_streams -select_streams a 2>/dev/null | grep "^channels=" | cut -d = -f 2 | head -n 1)
    }
    _get_channel_layout(){
        # get ffmpeg's channel count of the first audio stream.
        CHANNEL_LAYOUT=$("${FFPROBE_PATH}" "${1}" -show_streams -select_streams a 2>/dev/null | grep "^channel_layout=" | cut -d = -f 2 | head -n 1)
    }
    _get_audio_index "${1}"
    _get_audio_channels "${1}"
    _get_channel_layout "${1}"
    _has_first_two_tracks_mono "${1}"
    if [[ "${MULTIMONO}" = true ]] ; then
        _report -wt "The first two audio tracks are both mono. Considering track 1 for left and track 2 for right."
        _add_audio_filter -p "[0:a:0][0:a:1]amerge=inputs=2"
        _add_audio_filter "aformat=channel_layouts=stereo"
    elif [[ "${AUDIO_CHANNELS}" -gt 2 && "${CHANNEL_LAYOUT}" = "4.0" ]] ; then
        _report -wt "The first audio track has more than 2 channels. Considering channel 1 for left and channel 2 for right and ignoring the rest."
        _add_audio_filter -p "[0:a:0]channelmap=0|1:stereo"
    else
        _add_audio_filter "aformat=channel_layouts=stereo"
    fi
}

# STREAMING_MPEG4 settings
# output settings
STREAMING_MPEG4_EXTENSION="mp4"
STREAMING_MPEG4_SUFFIX=""
STREAMING_MPEG4_RELATIVE_PATH="STREAMING_MPEG4"
# video settings
STREAMING_MPEG4_OPTS+=(-c:v libx264)
STREAMING_MPEG4_OPTS+=(-profile:v high)
STREAMING_MPEG4_OPTS+=(-pix_fmt yuv420p)
STREAMING_MPEG4_OPTS+=(-crf 21) # increase to reduce quality and size
STREAMING_MPEG4_OPTS+=(-maxrate 2000k) # set maximum bitrate despite quality
# audio settings
STREAMING_MPEG4_AUDIO_OPTS+=(-c:a aac)
# container settings
STREAMING_MPEG4_OPTS+=(-f mp4)
STREAMING_MPEG4_OPTS+=(-movflags faststart)
STREAMING_MPEG4_AUDIO_OPTS+=(-map 0:a:0)

# STREAMING_WEBM settings
# output settings
STREAMING_WEBM_EXTENSION="webm"
STREAMING_WEBM_SUFFIX=""
STREAMING_WEBM_RELATIVE_PATH="STREAMING_WEBM"
# video settings
STREAMING_WEBM_OPTS+=(-c:v vp9)
STREAMING_WEBM_OPTS+=(-pix_fmt yuv420p)
STREAMING_WEBM_OPTS+=(-maxrate 2000k) # set maximum bitrate despite quality
# audio settings
STREAMING_WEBM_AUDIO_OPTS+=(-c:a opus)
# container settings
STREAMING_WEBM_OPTS+=(-f webm)
STREAMING_WEBM_AUDIO_OPTS+=(-map 0:a:0)

# Production IMX settings
# output settings
PRODUCTION_IMX_EXTENSION="mov"
PRODUCTION_IMX_SUFFIX=""
PRODUCTION_IMX_RELATIVE_PATH="PRODUCTION_IMX"
# video settings
PRODUCTION_IMX_OPTS+=(-r pal)
PRODUCTION_IMX_OPTS+=(-c:v mpeg2video)
PRODUCTION_IMX_OPTS+=(-intra_vlc 1)
PRODUCTION_IMX_OPTS+=(-non_linear_quant 1)
PRODUCTION_IMX_OPTS+=(-qmin 1)
PRODUCTION_IMX_OPTS+=(-dc 10)
PRODUCTION_IMX_OPTS+=(-lmin QP2LAMBDA)
PRODUCTION_IMX_OPTS+=(-ps 1)
PRODUCTION_IMX_OPTS+=(-flags +ildct+ilme)
PRODUCTION_IMX_OPTS+=(-pix_fmt yuv422p)
PRODUCTION_IMX_OPTS+=(-top 1)
PRODUCTION_IMX_OPTS+=(-mpv_flags strict_gop)
PRODUCTION_IMX_OPTS+=(-aspect 4:3)
PRODUCTION_IMX_OPTS+=(-qmax 12)
PRODUCTION_IMX_OPTS+=(-g 1)
PRODUCTION_IMX_OPTS+=(-intra)
PRODUCTION_IMX_OPTS+=(-b:v 50M)
PRODUCTION_IMX_OPTS+=(-maxrate:v 50M)
PRODUCTION_IMX_OPTS+=(-minrate:v 50M)
PRODUCTION_IMX_OPTS+=(-bufsize 2000000)
PRODUCTION_IMX_OPTS+=(-rc_init_occupancy 2000000)
PRODUCTION_IMX_OPTS+=(-rc_max_vbv_use 1)
PRODUCTION_IMX_OPTS+=(-rc_min_vbv_use 1)
PRODUCTION_IMX_OPTS+=(-rc_buf_aggressivity 0.25)
PRODUCTION_IMX_OPTS+=(-vbsf imxdump)
PRODUCTION_IMX_OPTS+=(-tag:v mx5p)
# audio settings
PRODUCTION_IMX_AUDIO_OPTS+=(-c:a pcm_s16le)
# container settings
PRODUCTION_IMX_OPTS+=(-f mov)
PRODUCTION_IMX_AUDIO_OPTS+=(-map 0:a)

# FRAMEMD5 settings
# output settings
FRAMEMD5_EXTENSION="md5"
FRAMEMD5_SUFFIX="_framemd5"
FRAMEMD5_RELATIVE_PATH="FRAMEMD5"
# container settings
FRAMEMD5_OPTS+=(-f framemd5)

# SCREENING_PRORES settings
# output settings
SCREENING_PRORES_EXTENSION="mov"
SCREENING_PRORES_SUFFIX=""
SCREENING_PRORES_RELATIVE_PATH="SCREENING_PRORES"
# video settings
SCREENING_PRORES_OPTS+=(-c:v prores_ks)
SCREENING_PRORES_OPTS+=(-profile:v lt) # verify profile?
SCREENING_PRORES_OPTS+=(-flags +ildct+ilme)
# audio settings
SCREENING_PRORES_AUDIO_OPTS+=(-c:a pcm_s16le)
# container settings
SCREENING_PRORES_OPTS+=(-f mov)
SCREENING_PRORES_AUDIO_OPTS+=(-map 0:a)

# SCREENING_FFV1 settings
# output settings
SCREENING_FFV1_EXTENSION="mkv"
SCREENING_FFV1_SUFFIX=""
SCREENING_FFV1_RELATIVE_PATH="SCREENING_FFV1"
# video settings
SCREENING_FFV1_OPTS+=(-c:v ffv1)
SCREENING_FFV1_OPTS+=(-level 3)
SCREENING_FFV1_OPTS+=(-g 1)
SCREENING_FFV1_OPTS+=(-slices 24)
SCREENING_FFV1_OPTS+=(-slicecrc 1)
# audio settings
SCREENING_FFV1_AUDIO_OPTS+=(-c:a flac)
# container settings
SCREENING_FFV1_OPTS+=(-f matroska)
SCREENING_FFV1_AUDIO_OPTS+=(-map 0:a)

while [ "${*}" != "" ] ; do
    _unset_variables
    INPUT="${1}"
    shift
    # get context about the input

    # encoding options
    _get_input_info "${INPUT}"
    _get_audiostreamcount "${INPUT}"

    if [[ "${CODEC_NAME}" == "jpeg2000" && "${HEIGHT}" == "288" ]] ; then
        _add_video_filter "[0:v:0]weave=first_field=bottom,setfield=tff,scale=flags=bicubic"
        _add_video_filter "setsar=sar*2[f1]"
        STREAMING_MPEG4_OPTS+=(-map "[f1]")
        STREAMING_WEBM_OPTS+=(-map "[f1]")
        PRODUCTION_IMX_OPTS+=(-map "[f1]")
        FRAMEMD5_OPTS+=(-map "[f1]")
        SCREENING_PRORES_OPTS+=(-map "[f1]")
        SCREENING_FFV1_OPTS+=(-map "[f1]")
    else
        _add_video_filter "[0:v:0]scale=flags=bicubic"
        STREAMING_MPEG4_OPTS+=(-map 0:v)
        STREAMING_WEBM_OPTS+=(-map 0:v)
        PRODUCTION_IMX_OPTS+=(-map 0:v)
        FRAMEMD5_OPTS+=(-map 0:v)
        SCREENING_PRORES_OPTS+=(-map 0:v)
        SCREENING_FFV1_OPTS+=(-map 0:v)
    fi

    _filter_to_middle_option

    if "${STREAMING_MPEG4_ENABLE}" ; then
        if [[ -z "${STREAMING_MPEG4_OUTPUT+1}" ]] ; then
            STREAMING_MPEG4_OUTPUT="${STREAMING_MPEG4_RELATIVE_PATH}/$(basename "${INPUT%.*}")${STREAMING_MPEG4_SUFFIX}.${STREAMING_MPEG4_EXTENSION}"
        fi
        _mkdir2 "$(dirname "${STREAMING_MPEG4_OUTPUT}")"
        if [[ "${AUDIOSTREAMCOUNT}" > 0 ]] ; then
            STREAMING_MPEG4_OPTS+=(${STREAMING_MPEG4_AUDIO_OPTS[@]})
        fi
        OUTPUTS+=(${STREAMING_MPEG4_OPTS[@]} ${FILTERCHAIN[@]} ${OUTPUTOPTIONS[@]} ${STREAMING_MPEG4_OUTPUT})
    fi

    if "${STREAMING_WEBM_ENABLE}" ; then
        if [[ -z "${STREAMING_WEBM_OUTPUT+1}" ]] ; then
            STREAMING_WEBM_OUTPUT="${STREAMING_WEBM_RELATIVE_PATH}/$(basename "${INPUT%.*}")${STREAMING_WEBM_SUFFIX}.${STREAMING_WEBM_EXTENSION}"
        fi
        _mkdir2 "$(dirname "${STREAMING_WEBM_OUTPUT}")"
        if [[ "${AUDIOSTREAMCOUNT}" > 0 ]] ; then
            STREAMING_WEBM_OPTS+=(${STREAMING_WEBM_AUDIO_OPTS[@]})
        fi
        OUTPUTS+=(${STREAMING_WEBM_OPTS[@]} ${FILTERCHAIN[@]} ${OUTPUTOPTIONS[@]} ${STREAMING_WEBM_OUTPUT})
    fi

    if "${FRAMEMD5_ENABLE}" ; then
        if [[ -z "${FRAMEMD5_OUTPUT+1}" ]] ; then
            FRAMEMD5_OUTPUT="${FRAMEMD5_RELATIVE_PATH}/$(basename "${INPUT%.*}")${FRAMEMD5_SUFFIX}.${FRAMEMD5_EXTENSION}"
        fi
        _mkdir2 "$(dirname "${FRAMEMD5_OUTPUT}")"
        OUTPUTS+=(${FRAMEMD5_OPTS[@]} ${FILTERCHAIN[@]} ${OUTPUTOPTIONS[@]} ${FRAMEMD5_OUTPUT})
    fi

    if "${SCREENING_PRORES_ENABLE}" ; then
        if [[ -z "${SCREENING_PRORES_OUTPUT+1}" ]] ; then
            SCREENING_PRORES_OUTPUT="${SCREENING_PRORES_RELATIVE_PATH}/$(basename "${INPUT%.*}")${SCREENING_PRORES_SUFFIX}.${SCREENING_PRORES_EXTENSION}"
        fi
        _mkdir2 "$(dirname "${SCREENING_PRORES_OUTPUT}")"
        if [[ "${AUDIOSTREAMCOUNT}" > 0 ]] ; then
            SCREENING_PRORES_OPTS+=(${SCREENING_PRORES_AUDIO_OPTS[@]})
        fi
        OUTPUTS+=(${SCREENING_PRORES_OPTS[@]} ${FILTERCHAIN[@]} ${OUTPUTOPTIONS[@]} ${SCREENING_PRORES_OUTPUT})
    fi

    if "${SCREENING_FFV1_ENABLE}" ; then
        if [[ -z "${SCREENING_FFV1_OUTPUT+1}" ]] ; then
            SCREENING_FFV1_OUTPUT="${SCREENING_FFV1_RELATIVE_PATH}/$(basename "${INPUT%.*}")${SCREENING_FFV1_SUFFIX}.${SCREENING_FFV1_EXTENSION}"
        fi
        _mkdir2 "$(dirname "${SCREENING_FFV1_OUTPUT}")"
        if [[ "${AUDIOSTREAMCOUNT}" > 0 ]] ; then
            SCREENING_FFV1_OPTS+=(${SCREENING_FFV1_AUDIO_OPTS[@]})
        fi
        OUTPUTS+=(${SCREENING_FFV1_OPTS[@]} ${FILTERCHAIN[@]} ${OUTPUTOPTIONS[@]} ${SCREENING_FFV1_OUTPUT})
    fi
    echo "${FFMPEG_PATH}" "${INPUTOPTIONS[@]}" -i "${INPUT}" "${OUTPUTS[@]}"
    "${FFMPEG_PATH}" "${INPUTOPTIONS[@]}" -i "${INPUT}" "${OUTPUTS[@]}"
    echo
done
